import axios from 'axios';
import crypto from 'crypto';
import { logger } from './logger.utils';
import { DatabaseClient } from './database.utils';

export interface CardlinkBillRequest {
  amount: number;
  order_id: string;
  description: string;
  type: 'normal';
  shop_id: string;
  currency_in: 'RUB';
  custom?: string;
  payer_pays_commission: 1;
  name: string;
}

export interface CardlinkBillResponse {
  success: string;
  link_url: string;
  link_page_url: string;
  bill_id: string;
}

export interface CardlinkPostback {
  Status: 'SUCCESS' | 'FAIL';
  InvId: string;
  Commission: string;
  CurrencyIn: string;
  OutSum: string;
  TrsId: string;
  custom?: string;
  SignatureValue: string;
}

export class PaymentService {
  private apiUrl = 'https://cardlink.link/api/v1';
  private apiToken: string;
  private shopId: string;
  private db: DatabaseClient;

  constructor() {
    this.apiToken = process.env.CARDLINK_API_TOKEN!;
    this.shopId = process.env.CARDLINK_SHOP_ID!;
    this.db = new DatabaseClient();

    if (!this.apiToken || !this.shopId) {
      throw new Error('CARDLINK_API_TOKEN and CARDLINK_SHOP_ID must be set in environment variables');
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
  async createBill(userId: string | number, amount: number, description: string = '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –§–µ–¥–æ—Ä–ö–æ–∏–Ω–æ–≤'): Promise<CardlinkBillResponse> {
    try {
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 100 —Ä—É–±–ª–µ–π
      if (amount < 100) {
        throw new Error('Minimum amount is 100 RUB');
      }

      const orderId = `user_${userId}_${Date.now()}`;
      
      const billData: CardlinkBillRequest = {
        amount,
        order_id: orderId,
        description,
        type: 'normal',
        shop_id: this.shopId,
        currency_in: 'RUB',
        custom: userId.toString(),
        payer_pays_commission: 1,
        name: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –§–µ–¥–æ—Ä–ö–æ–∏–Ω–æ–≤',
      };

      const response = await axios.post<CardlinkBillResponse>(
        `${this.apiUrl}/bill/create`,
        billData,
        {
          headers: {
            'Authorization': `Bearer ${this.apiToken}`,
            'Content-Type': 'application/x-www-form-urlencoded',
          },
        }
      );

      if (response.data.success === 'true') {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await this.db.createPayment(
          userId,
          amount,
          response.data.bill_id,
          response.data.link_page_url
        );

        logger.info(`Payment created for user ${userId}: ${response.data.bill_id}`);
        return response.data;
      } else {
        throw new Error('Failed to create bill');
      }
    } catch (error) {
      logger.error('Error creating Cardlink bill', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ postback
  private verifySignature(postback: CardlinkPostback): boolean {
    try {
      const { OutSum, InvId, SignatureValue } = postback;
      const expectedSignature = crypto
        .createHash('md5')
        .update(`${OutSum}:${InvId}:${this.apiToken}`)
        .digest('hex')
        .toUpperCase();

      return SignatureValue === expectedSignature;
    } catch (error) {
      logger.error('Error verifying signature', error);
      return false;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ postback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async handlePostback(postback: CardlinkPostback): Promise<{ success: boolean; message: string }> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
      if (!this.verifySignature(postback)) {
        logger.error('Invalid signature in postback', postback);
        return { success: false, message: 'Invalid signature' };
      }

      const { Status, InvId, OutSum, TrsId, custom } = postback;
      const userId = custom;
      const amount = parseFloat(OutSum);

      if (!userId) {
        logger.error('No user ID in postback custom field', postback);
        return { success: false, message: 'No user ID' };
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const payment = await this.db.getPaymentByBillId(TrsId);
      if (!payment) {
        logger.error(`Payment not found for bill_id: ${TrsId}`, postback);
        return { success: false, message: 'Payment not found' };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
      if (payment.status !== 'pending') {
        logger.info(`Payment already processed: ${TrsId}`, { status: payment.status });
        return { success: true, message: 'Already processed' };
      }

      if (Status === 'SUCCESS') {
        // –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ - –∑–∞—á–∏—Å–ª—è–µ–º –§–µ–¥–æ—Ä–ö–æ–∏–Ω—ã
        await this.db.updatePaymentStatus(TrsId, 'success');
        
        // 1 —Ä—É–±–ª—å = 1 –§–µ–¥–æ—Ä–ö–æ–∏–Ω
        const fedorcoinsToAdd = amount;
        await this.db.updateUserBalance(
          userId,
          fedorcoinsToAdd,
          'topup',
          `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Cardlink. –ü–ª–∞—Ç–µ–∂: ${TrsId}`
        );

        logger.info(`Successfully processed payment for user ${userId}: +${fedorcoinsToAdd} FC`, {
          billId: TrsId,
          amount,
          orderId: InvId,
        });

        return { success: true, message: 'Payment processed successfully' };
      } else {
        // –ù–µ—É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        await this.db.updatePaymentStatus(TrsId, 'failed');
        
        logger.info(`Failed payment for user ${userId}`, {
          billId: TrsId,
          amount,
          orderId: InvId,
        });

        return { success: true, message: 'Payment failed' };
      }
    } catch (error) {
      logger.error('Error handling postback', error);
      return { success: false, message: 'Internal error' };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
  async getPaymentStatus(billId: string): Promise<any> {
    try {
      const response = await axios.get(`${this.apiUrl}/bill/status`, {
        params: { bill_id: billId },
        headers: {
          'Authorization': `Bearer ${this.apiToken}`,
        },
      });

      return response.data;
    } catch (error) {
      logger.error('Error getting payment status', error);
      throw error;
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  formatPaymentMessage(billResponse: CardlinkBillResponse, amount: number): string {
    return `üí≥ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞**

üí∞ –°—É–º–º–∞: ${amount} —Ä—É–± = ${amount} –§–ö
üÜî –ù–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞: \`${billResponse.bill_id}\`

üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ](${billResponse.link_page_url})

‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –§–µ–¥–æ—Ä–ö–æ–∏–Ω—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100 —Ä—É–±–ª–µ–π.`;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
  formatSuccessMessage(amount: number, billId: string): string {
    return `‚úÖ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**

üí∞ –ó–∞—á–∏—Å–ª–µ–Ω–æ: ${amount} –§–ö
üÜî –ü–ª–∞—Ç–µ–∂: \`${billId}\`

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.`;
  }
}
