import { Telegraf, Context } from "telegraf";
import express, { Request, Response } from "express";
import { config } from "dotenv";
import { logger } from "./utils/logger.utils";
import { getAnswer, analyzeImage, transcribeAudio } from "./utils/chat.utils";
import { RedisClient } from "./utils/redis.utils";
import { DatabaseClient } from "./utils/database.utils";
import { UsageService } from "./utils/usage.utils";
import { PaymentService } from "./utils/payment.utils";
import RealsVideoProcessor from "./utils/video.utils";

config();

const redisClient = new RedisClient();
const dbClient = new DatabaseClient();
const usageService = new UsageService();
const paymentService = new PaymentService();

// Initialize connections and setup bot
async function initializeServices() {
  await redisClient.init();
  await dbClient.init();

  // Automatically setup bot commands on every start
  await setupBotCommands();
}

initializeServices().catch(console.error);

const IS_ALIVE = process.env.IS_ALIVE === "true";

const bot = new Telegraf(process.env.BOT_TOKEN!);
const app = express();

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏ form data
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

function isAvailableUrl(url: string): boolean {
  return (
    url.startsWith("https://www.instagram.com/reel/") ||
    url.startsWith("https://x.com/") ||
    url.startsWith("https://vt.tiktok.com/")
  );
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é –±–æ—Ç–∞
async function setupBotCommands() {
  try {
    logger.info("Setting up bot commands menu...");

    const commands = [
      { command: "start", description: "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" },
      { command: "balance", description: "üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –ª–∏–º–∏—Ç—ã" },
      {
        command: "stats",
        description: "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
      },
      { command: "topup", description: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –§–µ–¥–æ—Ä–ö–æ–∏–Ω–∞–º–∏" },
      { command: "help", description: "‚ùì –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏" },
      { command: "stoptalking", description: "üîá –û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç–µ" },
      { command: "starttalking", description: "üîä –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç–µ" },
    ];

    await bot.telegram.setMyCommands(commands);
    logger.info("‚úÖ Bot commands menu configured successfully", {
      commandsCount: commands.length,
    });
  } catch (error) {
    logger.error("‚ùå Error setting bot commands", error);
  }
}

bot.launch();

// –ï–¥–∏–Ω—ã–π middleware –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
bot.use(async (ctx: Context, next) => {
  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ª—é–±–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
  if (ctx.from && !ctx.from.is_bot) {
    try {
      const userData = {
        username: ctx.from.username,
        firstName: ctx.from.first_name,
        lastName: ctx.from.last_name,
      };
      await usageService.ensureUser(ctx.from.id, userData);
    } catch (error) {
      logger.error("Error ensuring user exists", error);
    }
  }

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ callback_query –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
  if (ctx.callbackQuery || (ctx.message as any)?.text?.startsWith('/')) {
    return next();
  }

  const message = ctx.message as any;
  if (!message) return;

  const { text, caption, chat, from, reply_to_message, photo, voice, audio } =
    message;

  if (!from?.is_bot) {
    // Check for URL in text
    if (text && isAvailableUrl(text)) {
      return next();
    }

    // Check for bot mention in text or caption
    const messageText = text || caption || "";
    if (messageText && messageText.includes(`@${process.env.BOT_USERNAME}`)) {
      return next();
    }

    // Check for reply to bot message
    if (
      reply_to_message &&
      reply_to_message.from?.username === process.env.BOT_USERNAME
    ) {
      return next();
    }

    // Allow private chats
    if (chat?.type === "private") {
      return next();
    }
  }

  return;
});

bot.start(async (ctx) => {
  const welcomeMessage = `ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FedoAI Bot!**

–Ø —É–º–µ—é:
üìù –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
üñº –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ GIF
üéµ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ä–µ—á—å –≤ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ —Å–æ—Ü—Å–µ—Ç–µ–π

üí∞ **–¢–∞—Ä–∏—Ñ—ã:**
üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 10 —Ç–µ–∫—Å—Ç–æ–≤, 3 –∫–∞—Ä—Ç–∏–Ω–∫–∏, 3 –∞—É–¥–∏–æ
ü™ô –§–µ–¥–æ—Ä–ö–æ–∏–Ω—ã: —Ç–µ–∫—Å—Ç—ã 0.5 –§–ö, –º–µ–¥–∏–∞ –æ—Ç 1 –§–ö

üìã **–ö–æ–º–∞–Ω–¥—ã:**
/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è  
/topup - –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
/help - –ø–æ–º–æ—â—å

–í –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –∞—É–¥–∏–æ!
–í –≥—Ä—É–ø–ø–∞—Ö —É–ø–æ–º–∏–Ω–∞–π—Ç–µ –º–µ–Ω—è: @${process.env.BOT_USERNAME}`;

  await ctx.reply(welcomeMessage, { parse_mode: "Markdown" });
});

bot.command("oldschool", (ctx) => ctx.reply("Hello"));
bot.command("hipster", (ctx) => ctx.reply("Œª"));

// Balance and stats commands
bot.command("balance", async (ctx) => {
  try {
    const userId = ctx.from!.id;
    const userInfo = await usageService.getUserInfo(userId);

    if (userInfo) {
      const formattedInfo = usageService.formatUserInfo(userInfo);
      await ctx.reply(formattedInfo, { parse_mode: "Markdown" });
    } else {
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.");
    }
  } catch (error) {
    logger.error("Error in balance command", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.");
  }
});

bot.command("stats", async (ctx) => {
  try {
    const userId = ctx.from!.id;
    const stats = await usageService.getUserStats(userId);

    if (stats) {
      let message = `üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n`;
      message += `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${
        stats.user.firstName || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
      }\n`;
      message += `ü™ô **–ë–∞–ª–∞–Ω—Å:** ${Number(stats.user.fedorcoins).toFixed(
        2
      )} –§–ö\n\n`;
      message += `üí∞ **–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:**\n`;
      message += `üìà –í—Å–µ–≥–æ: ${stats.transactions.total_transactions}\n`;
      message += `üíµ –°—É–º–º–∞: ${stats.transactions.total_amount.toFixed(
        2
      )} –§–ö\n\n`;
      message += `üìã **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:**\n`;

      stats.usage.forEach((usage) => {
        const emoji =
          usage.request_type === "text"
            ? "üìù"
            : usage.request_type === "image"
            ? "üñº"
            : "üéµ";
        message += `${emoji} ${usage.request_type}: ${
          usage.count
        } —Ä–∞–∑ (${usage.total_cost.toFixed(2)} –§–ö)\n`;
      });

      await ctx.reply(message, { parse_mode: "Markdown" });
    } else {
      await ctx.reply("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
    }
  } catch (error) {
    logger.error("Error in stats command", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
  }
});

bot.command("topup", async (ctx) => {
  try {
    const userId = ctx.from!.id;
    const args = ctx.message!.text.split(" ");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∫–∞–∑–∞–Ω–∞ –ª–∏ —Å—É–º–º–∞
    if (args.length < 2) {
      await ctx.reply(
        `üí≥ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞**

üí∞ –ö—É—Ä—Å: 1 —Ä—É–±–ª—å = 1 –§–µ–¥–æ—Ä–ö–æ–∏–Ω
üí∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 100 —Ä—É–±–ª–µ–π
üîÑ –ö–æ–º–∏—Å—Å–∏—é –ø–ª–∞—Ç–∏—Ç –ø–ª–∞—Ç–µ–ª—å—â–∏–∫

–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:`,
        {
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [
                { text: "üí∞ 100 —Ä—É–±", callback_data: "topup_100" },
                { text: "üí∞ 200 —Ä—É–±", callback_data: "topup_200" },
              ],
              [
                { text: "üí∞ 500 —Ä—É–±", callback_data: "topup_500" },
                { text: "üí∞ 1000 —Ä—É–±", callback_data: "topup_1000" },
              ],
              [
                { text: "üí∞ 2000 —Ä—É–±", callback_data: "topup_2000" },
                { text: "üí∞ 5000 —Ä—É–±", callback_data: "topup_5000" },
              ],
              [{ text: "‚úèÔ∏è –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data: "topup_custom" }],
            ],
          },
        }
      );
      return;
    }

    const amount = parseInt(args[1]);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
    if (isNaN(amount) || amount < 100) {
      await ctx.reply(
        "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100 —Ä—É–±–ª–µ–π."
      );
      return;
    }

    if (amount > 50000) {
      await ctx.reply("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 50,000 —Ä—É–±–ª–µ–π.");
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
    const billResponse = await paymentService.createBill(userId, amount);
    const message = paymentService.formatPaymentMessage(billResponse, amount);

    await ctx.reply(message, {
      parse_mode: "Markdown",
    });

    logger.info(`Payment bill created for user ${userId}: ${amount} RUB`);
  } catch (error) {
    logger.error("Error in topup command", error);
    await ctx.reply(
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    );
  }
});

bot.command("stoptalking", async (ctx) => {
  await redisClient.set(`IS_MUTED_${ctx.chat!.id}`, true);
  return ctx.reply("Okay! I will not talk anymore!", {
    reply_parameters: { message_id: ctx.message!.message_id },
  });
});

bot.command("starttalking", async (ctx) => {
  await redisClient.set(`IS_MUTED_${ctx.chat!.id}`, false);
  return ctx.reply("Okay! I am ready to talk!", {
    reply_parameters: { message_id: ctx.message!.message_id },
  });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
bot.command("setupmenu", async (ctx) => {
  try {
    await setupBotCommands();
    await ctx.reply(
      "‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Telegram –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π."
    );
  } catch (error) {
    logger.error("Error in setupmenu command", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥.");
  }
});

bot.help(async (ctx) => {
  const helpMessage = `‚ùì **–ü–æ–º–æ—â—å FedoAI Bot**

ü§ñ **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ GIF
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ä–µ—á—å –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ Instagram, TikTok, X

üí∞ **–°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã:**
üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã:**
‚Ä¢ 10 —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ 3 –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫/GIF
‚Ä¢ 3 —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∞—É–¥–∏–æ

ü™ô **–§–µ–¥–æ—Ä–ö–æ–∏–Ω—ã (1 —Ä—É–± = 1 –§–ö):**
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: 0.5 –§–ö
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –æ—Ç 1 –§–ö
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ: –æ—Ç 0.5 –§–ö (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)

üìã **–ö–æ–º–∞–Ω–¥—ã:**
/balance - –±–∞–ª–∞–Ω—Å –∏ –ª–∏–º–∏—Ç—ã
/stats - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/topup <—Å—É–º–º–∞> - –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å (–º–∏–Ω. 100 —Ä—É–±)

üîß **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
‚Ä¢ **–í –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ:** –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ/–æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–µ–¥–∏–∞
‚Ä¢ **–í –≥—Ä—É–ø–ø–∞—Ö:** —É–ø–æ–º–∏–Ω–∞–π—Ç–µ @${process.env.BOT_USERNAME}

üí° **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @your_support_username`;

  await ctx.reply(helpMessage, { parse_mode: "Markdown" });
});

const realsVideoProcessor = new RealsVideoProcessor(bot.telegram);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
bot.action(/^topup_(\d+)$/, async (ctx) => {
  try {
    logger.info("Topup button clicked", { data: (ctx.callbackQuery as any)?.data });

    const amount = parseInt(ctx.match![1]);
    const userId = ctx.from!.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Cardlink
    if (!process.env.CARDLINK_API_TOKEN || !process.env.CARDLINK_SHOP_ID) {
      await ctx.answerCbQuery("‚ùå –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞");
      await ctx.editMessageText(
        `‚ùå **–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**
        
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
- CARDLINK_API_TOKEN
- CARDLINK_SHOP_ID

–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`,
        { parse_mode: "Markdown" }
      );
      return;
    }

    await ctx.answerCbQuery("üí≥ –°–æ–∑–¥–∞—é —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É...");

    // –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
    const billResponse = await paymentService.createBill(userId, amount);
    const message = paymentService.formatPaymentMessage(billResponse, amount);

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [
          [{ text: "üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url: billResponse.link_page_url }],
          [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "topup_back" }],
        ],
      },
    });

    logger.info(
      `Payment bill created via button for user ${userId}: ${amount} RUB`
    );
  } catch (error) {
    logger.error("Error in topup button", error);
    await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞");
    await ctx.editMessageText(
      `‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞**
      
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : "Unknown error"}`,
      { parse_mode: "Markdown" }
    );
  }
});

// –ö–Ω–æ–ø–∫–∞ "–î—Ä—É–≥–∞—è —Å—É–º–º–∞"
bot.action("topup_custom", async (ctx) => {
  logger.info("Topup custom button clicked");
  await ctx.answerCbQuery("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É");
  await ctx.editMessageText(
    `üí≥ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞**

–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: \`/topup <—Å—É–º–º–∞>\`
–ü—Ä–∏–º–µ—Ä: \`/topup 750\`

üí∞ –ö—É—Ä—Å: 1 —Ä—É–±–ª—å = 1 –§–µ–¥–æ—Ä–ö–æ–∏–Ω
üí∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 100 —Ä—É–±–ª–µ–π
üí∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 50,000 —Ä—É–±–ª–µ–π`,
    {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "topup_back" }]],
      },
    }
  );
});

// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
bot.action("topup_back", async (ctx) => {
  logger.info("Topup back button clicked");
  await ctx.answerCbQuery("üîô –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å—É–º–º—ã");
  await ctx.editMessageText(
    `üí≥ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞**

üí∞ –ö—É—Ä—Å: 1 —Ä—É–±–ª—å = 1 –§–µ–¥–æ—Ä–ö–æ–∏–Ω
üí∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 100 —Ä—É–±–ª–µ–π
üîÑ –ö–æ–º–∏—Å—Å–∏—é –ø–ª–∞—Ç–∏—Ç –ø–ª–∞—Ç–µ–ª—å—â–∏–∫

–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:`,
    {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üí∞ 100 —Ä—É–±", callback_data: "topup_100" },
            { text: "üí∞ 200 —Ä—É–±", callback_data: "topup_200" },
          ],
          [
            { text: "üí∞ 500 —Ä—É–±", callback_data: "topup_500" },
            { text: "üí∞ 1000 —Ä—É–±", callback_data: "topup_1000" },
          ],
          [
            { text: "üí∞ 2000 —Ä—É–±", callback_data: "topup_2000" },
            { text: "üí∞ 5000 —Ä—É–±", callback_data: "topup_5000" },
          ],
          [{ text: "‚úèÔ∏è –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data: "topup_custom" }],
        ],
      },
    }
  );
});

bot.on("text", async (ctx) => {
  const message = ctx.message as any;
  const { text, chat, message_id, reply_to_message } = message;

  try {
    const isMuted = await redisClient.get<boolean>(`IS_MUTED_${chat.id}`);

    if (isAvailableUrl(text)) {
      try {
        realsVideoProcessor.addVideoToQueue({ url: text, ctx });
      } catch (error) {
        logger.error(error);
        await ctx.reply("Something went wrong! Please try again!");
      }
    } else if (
      IS_ALIVE &&
      !isMuted &&
      process.env.LOCAL_CHAT_ID?.includes(`${chat.id}`)
    ) {
      try {
        // Check if user can use text service
        const userId = ctx.from!.id;
        const availability = await usageService.canUseService(userId, "text");

        if (!availability.canUse) {
          const userInfo = await usageService.getUserInfo(userId);
          if (userInfo) {
            const errorMessage = usageService.formatInsufficientBalanceMessage(
              "text",
              availability.cost,
              userInfo
            );
            await ctx.reply(errorMessage, { parse_mode: "Markdown" });
            return;
          }
        }

        // Use the service
        const usageResult = await usageService.useService(userId, "text");

        const answerData = await getAnswer(
          chat.id,
          text,
          reply_to_message,
          bot
        );
        if (answerData?.message?.content) {
          let replyText = answerData.message.content;

          // Add cost info if not free
          if (!usageResult.wasFree) {
            replyText += `\n\nüí∏ _–°—Ç–æ–∏–º–æ—Å—Ç—å: ${usageResult.cost.toFixed(
              2
            )} –§–ö_`;
          }

          // –í –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
          if (chat.type === "private") {
            await ctx.reply(replyText, { parse_mode: "Markdown" });
          } else {
            // –í –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.reply(replyText, {
              reply_parameters: { message_id },
              parse_mode: "Markdown",
            });
          }
        }
      } catch (error) {
        logger.error(error);
        if (
          error instanceof Error &&
          error.message === "Insufficient balance"
        ) {
          const userInfo = await usageService.getUserInfo(ctx.from!.id);
          if (userInfo) {
            const errorMessage = usageService.formatInsufficientBalanceMessage(
              "text",
              0.5,
              userInfo
            );
            await ctx.reply(errorMessage, { parse_mode: "Markdown" });
          }
        } else {
          await ctx.reply("Something went wrong! Please try again!");
        }
      }
    }
  } catch (error) {
    logger.error(error);
    await ctx.reply("Something went wrong! Please try again!");
  }
});

// Handle photo messages
bot.on("photo", async (ctx) => {
  const message = ctx.message as any;
  const { caption, chat, message_id, photo } = message;

  try {
    const isMuted = await redisClient.get<boolean>(`IS_MUTED_${chat.id}`);

    // Check conditions for photo analysis
    const isPrivateChat = chat.type === "private";
    const isMentionedInGroup =
      caption && caption.includes(`@${process.env.BOT_USERNAME}`);
    const shouldAnalyze =
      IS_ALIVE &&
      !isMuted &&
      process.env.LOCAL_CHAT_ID?.includes(`${chat.id}`) &&
      (isPrivateChat || isMentionedInGroup);

    if (shouldAnalyze) {
      try {
        // Check if user can use image service
        const userId = ctx.from!.id;
        const photoFileId = photo[photo.length - 1].file_id;
        const file = await bot.telegram.getFile(photoFileId);
        const fileSize = file.file_size || 0;

        const availability = await usageService.canUseService(
          userId,
          "image",
          undefined,
          fileSize
        );

        if (!availability.canUse) {
          const userInfo = await usageService.getUserInfo(userId);
          if (userInfo) {
            const errorMessage = usageService.formatInsufficientBalanceMessage(
              "image",
              availability.cost,
              userInfo
            );
            await ctx.reply(errorMessage, { parse_mode: "Markdown" });
            return;
          }
        }

        // Use the service
        const usageResult = await usageService.useService(
          userId,
          "image",
          undefined,
          fileSize
        );

        // Analyze the photo
        const imageAnalysis = await analyzeImage(bot, photoFileId);

        // Prepare message with photo analysis
        const messageText = caption
          ? `${caption}\n\n[Photo analysis: ${imageAnalysis}]`
          : `[Photo analysis: ${imageAnalysis}]`;

        const answerData = await getAnswer(chat.id, messageText, null, bot);
        if (answerData?.message?.content) {
          let replyText = answerData.message.content;

          // Add cost info if not free
          if (!usageResult.wasFree) {
            replyText += `\n\nüí∏ _–°—Ç–æ–∏–º–æ—Å—Ç—å: ${usageResult.cost.toFixed(
              2
            )} –§–ö_`;
          }

          // –í –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
          if (chat.type === "private") {
            await ctx.reply(replyText, { parse_mode: "Markdown" });
          } else {
            // –í –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.reply(replyText, {
              reply_parameters: { message_id },
              parse_mode: "Markdown",
            });
          }
        }
      } catch (error) {
        logger.error(error);
        if (
          error instanceof Error &&
          error.message === "Insufficient balance"
        ) {
          const userInfo = await usageService.getUserInfo(ctx.from!.id);
          if (userInfo) {
            const errorMessage = usageService.formatInsufficientBalanceMessage(
              "image",
              1.0,
              userInfo
            );
            await ctx.reply(errorMessage, { parse_mode: "Markdown" });
          }
        } else {
          await ctx.reply("Something went wrong analyzing the photo!");
        }
      }
    }
  } catch (error) {
    logger.error(error);
    await ctx.reply("Something went wrong! Please try again!");
  }
});

// Handle voice messages
bot.on("voice", async (ctx) => {
  const message = ctx.message as any;
  const { chat, message_id, voice } = message;

  try {
    const isMuted = await redisClient.get<boolean>(`IS_MUTED_${chat.id}`);

    // Check conditions for voice analysis
    const isPrivateChat = chat.type === "private";
    const shouldAnalyze =
      IS_ALIVE &&
      !isMuted &&
      process.env.LOCAL_CHAT_ID?.includes(`${chat.id}`) &&
      isPrivateChat;

    if (shouldAnalyze) {
      try {
        // Check if user can use audio service
        const userId = ctx.from!.id;
        const duration = voice.duration || 30; // Default 30 seconds

        const availability = await usageService.canUseService(
          userId,
          "audio",
          duration
        );

        if (!availability.canUse) {
          const userInfo = await usageService.getUserInfo(userId);
          if (userInfo) {
            const errorMessage = usageService.formatInsufficientBalanceMessage(
              "audio",
              availability.cost,
              userInfo
            );
            await ctx.reply(errorMessage, { parse_mode: "Markdown" });
            return;
          }
        }

        // Use the service
        const usageResult = await usageService.useService(
          userId,
          "audio",
          duration,
          voice.file_size
        );

        // Transcribe the voice message
        const transcription = await transcribeAudio(bot, voice.file_id);

        // Prepare message with transcription
        const messageText = `[Voice message transcription: "${transcription}"]`;

        const answerData = await getAnswer(chat.id, messageText, null, bot);
        if (answerData?.message?.content) {
          let replyText = answerData.message.content;

          // Add cost info if not free
          if (!usageResult.wasFree) {
            replyText += `\n\nüí∏ _–°—Ç–æ–∏–º–æ—Å—Ç—å: ${usageResult.cost.toFixed(
              2
            )} –§–ö_`;
          }

          // –í –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
          if (chat.type === "private") {
            await ctx.reply(replyText, { parse_mode: "Markdown" });
          } else {
            // –í –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.reply(replyText, {
              reply_parameters: { message_id },
              parse_mode: "Markdown",
            });
          }
        }
      } catch (error) {
        logger.error(error);
        if (
          error instanceof Error &&
          error.message === "Insufficient balance"
        ) {
          const userInfo = await usageService.getUserInfo(ctx.from!.id);
          if (userInfo) {
            const errorMessage = usageService.formatInsufficientBalanceMessage(
              "audio",
              0.5,
              userInfo
            );
            await ctx.reply(errorMessage, { parse_mode: "Markdown" });
          }
        } else {
          await ctx.reply(
            "Something went wrong transcribing the voice message!"
          );
        }
      }
    }
  } catch (error) {
    logger.error(error);
    await ctx.reply("Something went wrong! Please try again!");
  }
});

// Handle audio messages
bot.on("audio", async (ctx) => {
  const message = ctx.message as any;
  const { chat, message_id, audio } = message;

  try {
    const isMuted = await redisClient.get<boolean>(`IS_MUTED_${chat.id}`);

    // Check conditions for audio analysis
    const isPrivateChat = chat.type === "private";
    const shouldAnalyze =
      IS_ALIVE &&
      !isMuted &&
      process.env.LOCAL_CHAT_ID?.includes(`${chat.id}`) &&
      isPrivateChat;

    if (shouldAnalyze) {
      try {
        // Check if user can use audio service
        const userId = ctx.from!.id;
        const duration = audio.duration || 30; // Default 30 seconds

        const availability = await usageService.canUseService(
          userId,
          "audio",
          duration
        );

        if (!availability.canUse) {
          const userInfo = await usageService.getUserInfo(userId);
          if (userInfo) {
            const errorMessage = usageService.formatInsufficientBalanceMessage(
              "audio",
              availability.cost,
              userInfo
            );
            await ctx.reply(errorMessage, { parse_mode: "Markdown" });
            return;
          }
        }

        // Use the service
        const usageResult = await usageService.useService(
          userId,
          "audio",
          duration,
          audio.file_size
        );

        // Transcribe the audio message
        const transcription = await transcribeAudio(bot, audio.file_id);

        // Prepare message with transcription
        const messageText = `[Audio message transcription: "${transcription}"]`;

        const answerData = await getAnswer(chat.id, messageText, null, bot);
        if (answerData?.message?.content) {
          let replyText = answerData.message.content;

          // Add cost info if not free
          if (!usageResult.wasFree) {
            replyText += `\n\nüí∏ _–°—Ç–æ–∏–º–æ—Å—Ç—å: ${usageResult.cost.toFixed(
              2
            )} –§–ö_`;
          }

          // –í –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
          if (chat.type === "private") {
            await ctx.reply(replyText, { parse_mode: "Markdown" });
          } else {
            // –í –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.reply(replyText, {
              reply_parameters: { message_id },
              parse_mode: "Markdown",
            });
          }
        }
      } catch (error) {
        logger.error(error);
        if (
          error instanceof Error &&
          error.message === "Insufficient balance"
        ) {
          const userInfo = await usageService.getUserInfo(ctx.from!.id);
          if (userInfo) {
            const errorMessage = usageService.formatInsufficientBalanceMessage(
              "audio",
              0.5,
              userInfo
            );
            await ctx.reply(errorMessage, { parse_mode: "Markdown" });
          }
        } else {
          await ctx.reply(
            "Something went wrong transcribing the audio message!"
          );
        }
      }
    }
  } catch (error) {
    logger.error(error);
    await ctx.reply("Something went wrong! Please try again!");
  }
});

// Handle animation/GIF messages
bot.on("animation", async (ctx) => {
  const message = ctx.message as any;
  const { caption, chat, message_id, animation } = message;

  try {
    const isMuted = await redisClient.get<boolean>(`IS_MUTED_${chat.id}`);

    // Check conditions for animation analysis
    const isPrivateChat = chat.type === "private";
    const isMentionedInGroup =
      caption && caption.includes(`@${process.env.BOT_USERNAME}`);
    const shouldAnalyze =
      IS_ALIVE &&
      !isMuted &&
      process.env.LOCAL_CHAT_ID?.includes(`${chat.id}`) &&
      (isPrivateChat || isMentionedInGroup);

    if (shouldAnalyze) {
      try {
        // For animated GIFs, we don't charge - just respond
        const messageText = caption
          ? `${caption}\n\n[–Ø –≤–∏–∂—É —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é GIF, –Ω–æ –Ω–µ –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –ú–æ–≥—É —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.]`
          : `[–Ø –≤–∏–∂—É —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é GIF, –Ω–æ –Ω–µ –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –ú–æ–≥—É —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.]`;

        const answerData = await getAnswer(chat.id, messageText, null, bot);
        if (answerData?.message?.content) {
          // –í –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
          if (chat.type === "private") {
            await ctx.reply(answerData.message.content, {
              parse_mode: "Markdown",
            });
          } else {
            // –í –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.reply(answerData.message.content, {
              reply_parameters: { message_id },
              parse_mode: "Markdown",
            });
          }
        }
      } catch (error) {
        logger.error(error);
        await ctx.reply("Something went wrong responding to the GIF!");
      }
    }
  } catch (error) {
    logger.error(error);
    await ctx.reply("Something went wrong! Please try again!");
  }
});

// Handle video messages
bot.on("video", async (ctx) => {
  const message = ctx.message as any;
  const { caption, chat, message_id } = message;

  try {
    const isMuted = await redisClient.get<boolean>(`IS_MUTED_${chat.id}`);

    // Check conditions for video response
    const isPrivateChat = chat.type === "private";
    const isMentionedInGroup =
      caption && caption.includes(`@${process.env.BOT_USERNAME}`);
    const shouldRespond =
      IS_ALIVE &&
      !isMuted &&
      process.env.LOCAL_CHAT_ID?.includes(`${chat.id}`) &&
      (isPrivateChat || isMentionedInGroup);

    if (shouldRespond) {
      const messageText = caption
        ? `${caption}\n\n[–Ø –≤–∏–∂—É —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∏–¥–µ–æ, –Ω–æ –Ω–µ –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç. –ú–æ–≥—É —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º, —Å—Ç–∞—Ç–∏—á–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –∞—É–¥–∏–æ.]`
        : `[–Ø –≤–∏–∂—É —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∏–¥–µ–æ, –Ω–æ –Ω–µ –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç. –ú–æ–≥—É —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º, —Å—Ç–∞—Ç–∏—á–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –∞—É–¥–∏–æ.]`;

      const answerData = await getAnswer(chat.id, messageText, null, bot);
      if (answerData?.message?.content) {
        // –í –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if (chat.type === "private") {
          await ctx.reply(answerData.message.content, {
            parse_mode: "Markdown",
          });
        } else {
          // –í –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.reply(answerData.message.content, {
            reply_parameters: { message_id },
            parse_mode: "Markdown",
          });
        }
      }
    }
  } catch (error) {
    logger.error(error);
    await ctx.reply("Something went wrong! Please try again!");
  }
});

bot.on("sticker", (ctx) => ctx.reply("üëç"));

// Postback endpoint –¥–ª—è Cardlink
app.post("/webhook/cardlink", async (req: Request, res: Response) => {
  try {
    logger.info("Received Cardlink postback", req.body);

    const result = await paymentService.handlePostback(req.body);

    if (result.success) {
      // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (req.body.Status === "SUCCESS" && req.body.custom) {
        const userId = req.body.custom;
        const amount = parseFloat(req.body.OutSum);
        const message = paymentService.formatSuccessMessage(
          amount,
          req.body.TrsId
        );

        try {
          await bot.telegram.sendMessage(userId, message, {
            parse_mode: "Markdown",
          });
        } catch (error) {
          logger.error("Error sending payment notification to user", error);
        }
      }

      res.status(200).send("OK");
    } else {
      res.status(400).send(result.message);
    }
  } catch (error) {
    logger.error("Error processing Cardlink postback", error);
    res.status(500).send("Internal Server Error");
  }
});

// Success page - –∫—É–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
app.post("/payment/success", async (req: Request, res: Response) => {
  try {
    const { InvId, OutSum, CurrencyIn } = req.body;

    res.send(`
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
          body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: #f0f8ff; }
          .success { color: #28a745; font-size: 24px; margin-bottom: 20px; }
          .info { color: #333; margin: 10px 0; }
          .button { background: #007bff; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block; margin-top: 20px; }
        </style>
      </head>
      <body>
        <div class="success">‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</div>
        <div class="info">–ó–∞–∫–∞–∑: ${InvId}</div>
        <div class="info">–°—É–º–º–∞: ${OutSum} ${CurrencyIn}</div>
        <div class="info">–§–µ–¥–æ—Ä–ö–æ–∏–Ω—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å</div>
        <a href="https://t.me/fedoai_bot" class="button">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É</a>
      </body>
      </html>
    `);
  } catch (error) {
    logger.error("Error in success page", error);
    res.status(500).send("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏");
  }
});

// Fail page - –∫—É–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
app.post("/payment/fail", async (req: Request, res: Response) => {
  try {
    const { InvId, OutSum, CurrencyIn } = req.body;

    res.send(`
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
          body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: #fff5f5; }
          .error { color: #dc3545; font-size: 24px; margin-bottom: 20px; }
          .info { color: #333; margin: 10px 0; }
          .button { background: #007bff; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block; margin-top: 20px; }
          .retry { background: #28a745; }
        </style>
      </head>
      <body>
        <div class="error">‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞</div>
        <div class="info">–ó–∞–∫–∞–∑: ${InvId}</div>
        <div class="info">–°—É–º–º–∞: ${OutSum} ${CurrencyIn}</div>
        <div class="info">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</div>
        <a href="https://t.me/fedoai_bot" class="button">–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É</a>
        <a href="https://t.me/fedoai_bot" class="button retry">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</a>
      </body>
      </html>
    `);
  } catch (error) {
    logger.error("Error in fail page", error);
    res.status(500).send("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏");
  }
});

// Refund webhook - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
app.post("/webhook/refund", async (req: Request, res: Response) => {
  try {
    logger.info("Received refund webhook", req.body);

    const { Id, Amount, Currency, Status, InvId, BillId, PaymentId } = req.body;

    if (Status === "SUCCESS") {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
      // –ú–æ–∂–Ω–æ —Å–ø–∏—Å–∞—Ç—å –§–µ–¥–æ—Ä–ö–æ–∏–Ω—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
      logger.info(
        `Refund processed: ${Id}, Amount: ${Amount} ${Currency}, Payment: ${PaymentId}`
      );
    }

    res.status(200).send("OK");
  } catch (error) {
    logger.error("Error processing refund webhook", error);
    res.status(500).send("Internal Server Error");
  }
});

// Chargeback webhook - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ä–¥–∂–±—ç–∫–æ–≤
app.post("/webhook/chargeback", async (req: Request, res: Response) => {
  try {
    logger.info("Received chargeback webhook", req.body);

    const { Id, Status, InvId, BillId, PaymentId } = req.body;

    if (Status === "SUCCESS") {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ä–¥–∂–±—ç–∫–∞ - —Å–ø–∏—Å–∞—Ç—å –§–µ–¥–æ—Ä–ö–æ–∏–Ω—ã, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      logger.warn(`Chargeback processed: ${Id}, Payment: ${PaymentId}`);
    }

    res.status(200).send("OK");
  } catch (error) {
    logger.error("Error processing chargeback webhook", error);
    res.status(500).send("Internal Server Error");
  }
});

// Health check endpoint
app.get("/health", (req: Request, res: Response) => {
  res.status(200).json({ status: "OK", timestamp: new Date().toISOString() });
});

// –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  logger.info(`HTTP server started on port ${PORT}`);
});

// Enable graceful stop
process.once("SIGINT", () => {
  bot.stop("SIGINT");
  process.exit(0);
});
process.once("SIGTERM", () => {
  bot.stop("SIGTERM");
  process.exit(0);
});
